# expose std;


box Num(value) given str;

box Add(a, b);
box Sub(a, b);
box Mul(a, b);
box Div(a, b);

box Pos(a);
box Neg(a);


# Reads *source* into an AST node.
fun read(source) given str {
  token  := ["<START>", "..."];
  cursor := 0;

  # Returns the precedence of the current token, or 0
  # if it has no precedence.
  fun precedence? =
    if token(0) in ["+", "-"]
      1
    else if token(0) in ["*", "/"]
      2
    else
      0;

  # Matches *pattern* against offset source.
  fun match(pattern) given regex =
    if source.offset(cursor) is pattern
      cursor += #(return &_);

  # Consumes exactly one token and returns the previous
  # token.
  fun consume =
    token = return token and
      if match(`[1-9]\d*`)
        ["NUMBER", _]
      else if match(`[-+*/()]`)
        [&_, _]
      else if match(`[ ]+`)
        next
      else if match(`$`)
        ["EOF", "end-of-input"]
      else
        die("invalid lexeme");

  # `consume`s only if current token type is *type*.
  fun consume(type) given str = if token(0) is type consume();

  # Parses a prefix expression.
  fun prefix =
    if it = consume("NUMBER")
      Num(it(1))
    else if consume("+")
      Pos(prefix())
    else if consume("-")
      Neg(prefix())
    else if consume("(")
      return infix(0) and consume(")")
    else
      die("invalid syntax in prefix position: " ~ token(0));

  # Parses an infix expression.
  fun infix(depth) given num {
    left = prefix();

    loop (depth < (level = precedence?())) {
      token-type = consume()(0);

      kind =
        if token-type is "+"
          Add
        else if token-type is "-"
          Sub
        else if token-type is "*"
          Mul
        else if token-type is "/"
          Div;

      left = kind(left, infix(level))
    }

    left
  }

  # Pre-read the first token.
  consume();

  infix(0);
}


# Evaluates the *entity*.
# fun eval(entity) = die("eval(): unknown entity: " ~ entity);
# fun eval(entity) given Num = +entity.value;
# fun eval(entity) given Pos = eval(entity.a);
# fun eval(entity) given Neg = -eval(entity.a);
# fun eval(entity) given Add = eval(entity.a) + eval(entity.b);
# fun eval(entity) given Sub = eval(entity.a) - eval(entity.b);
# fun eval(entity) given Mul = eval(entity.a) * eval(entity.b);
# fun eval(entity) given Div = eval(entity.a) / eval(entity.b);

fun eval(entity_1) = die("eval(): unknown entity: " ~ entity_1);

fun eval(entity_2) given Num = +entity_2.value;
fun eval(entity_3) given Pos = eval(entity_3.a);
fun eval(entity_4) given Neg = -eval(entity_4.a);

fun eval(entity_5) given Add = eval(entity_5.a) + eval(entity_5.b);
fun eval(entity_6) given Sub = eval(entity_6.a) - eval(entity_6.b);
fun eval(entity_7) given Mul = eval(entity_7.a) * eval(entity_7.b);
fun eval(entity_8) given Div = eval(entity_8.a) / eval(entity_8.b);


# Read-eval-print loop:
loop
  ask(">")
    .read()
    .eval()
    .say();
