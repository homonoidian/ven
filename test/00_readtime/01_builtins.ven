distinct ven.tests.readtime.builtins;

nud TEST = <{
  # It isn't possible to test printing itself right now. But
  # later, we may be able to catch the print event via some
  # sort of readtime, IO try/catch?
  ensure "builtin 'say' works" {
    should "return empty vector if given no arguments"
      say() is [];

    should "return the argument if given one argument"
      say(1) is 1;
      say("foobar") is "foobar";

    should "return a vector of arguments if given multiple arguments"
      say(1, 2, 3) is [1 2 3];
  }

  # 'reverse' is a temporary builtin that covers the unsupported
  # `foo[from -1]`.
  ensure "builtin 'reverse' works" {
    should "return empty string if given empty string"
      reverse("") is "";

    should "return the reversed string"
      reverse("foobar") is "raboof";
      reverse("abba") is "abba";

    should "die on anything but string"
      reverse(12) dies;
      reverse([1 2 3]) dies;
      reverse(true) dies;
      reverse(quote(a + b)) dies;
      # ... etc
  }

  # 'chars' is a temporary builtin that covers the unsupported
  # `foo[]`.
  ensure "builtin 'chars' works" {
    should "return empty vector if given empty string"
      chars("") is [];

    should "return the characters in a string"
      chars("foo") is ["f" "o" "o"];

    should "die on anything but string"
      chars(12) dies;
      chars([1 2 3]) dies;
      chars(true) dies;
      chars(quote(a + b)) dies;
      # ... etc
  }
}>;

TEST();

# Below are a number of tests for blocks. They're outside
# because there is no way to check whether block parsing
# works readtime-only. Also, unfortunately there is no way
# to check whether block reading dies; this destroys the
# reader logic (by introducing some sort of slippage).

nud TAKES-A-BLOCK = <block()>;
nud TAKES-CURLY-BLOCK = <curly-block()>;
nud TAKES-LOOSE-BLOCK = <loose-block()>;
nud TAKES-TIGHT-BLOCK = <tight-block()>;

ensure "readtime block() reads blocks, and they evaluate" {
  should "block(): accept curly block"
    TAKES-A-BLOCK() { 1 + 1 } is 2;

  should "block(): accept loose block"
    (TAKES-A-BLOCK() = 1 + 1) is 2;

  should "block(): accept tight block"
    (TAKES-A-BLOCK() 123) is 123;
    # tight-block() has very tight precedence: read the
    # following as `((TAKES-A-BLOCK() 123) + 1) is 124`,
    # which expands to `({ 123 } + 1) is 124`.
    (TAKES-A-BLOCK() 123 + 1) is 124;
}

ensure "readtime curly-block() reads curly block" {
  should "read curly block"
    TAKES-CURLY-BLOCK() { 1 + 1 } is 2;
}

ensure "readtime loose-block() reads loose block" {
  should "read loose block"
    (TAKES-LOOSE-BLOCK() = 1 + 1) is 2;
}

ensure "readtime tight-block() reads tight block" {
  should "read tight block"
    TAKES-TIGHT-BLOCK() 123 is 123;
    # tight-block() has very tight precedence: read the
    # following as `((TAKES-A-BLOCK() 123) + 1) is 124`,
    # which expands to `({ 123 } + 1) is 124`.
    (TAKES-TIGHT-BLOCK() 123 + 1) is 124;

}
