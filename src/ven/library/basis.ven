# This file is baked right into the executable. If you change
# something here, don't forget to recompile Ven! Otherwise,
# the stuff you've added won't be available.
#
# - Do not 'expose': it may not work as expected.
# - Do not specify 'distinct': basis lives inside the executable,
#   and therefore is not accessible to the lookup infrastructure.


# Maps over this vector, performing `apply(item, *)` for each
# item **if it is callable**, orelse ignoring the item.
#
# ```ven
# [2, (n) n + 1, 4](1) # => [2, 3, 4]
# ```
fun<vec> __iter(*) given any =
  |&_.callable? and apply(_, *)() or _| $;

# Assigns this value's subordinates, specified by the rest,
# to *value*.
#
# ```ven
# # Usage with vectors:
# foo = 0 x 100;
# foo[0] = "1";
# say(foo); # ["1" 0 0 0 0 0 0 ...];
#
# # Usage with box instances:
# immediate box Bar;
# Bar["x"] = 1;
# Bar["y"] = 2;
# Bar.[x, y].say(); # [1 2]
#
#
# # Usage with maps:
# person = %{ first-name "John" last-name "Doe" };
# person["first-name"] = "Samuel";
# person.[first-name, last-name].say(); # ["Samuel" "Doe"]
# ```
fun<any> __access_assign(value, *) =
  |subordinate($, _, return value)| *;

# Assigns an index range of this value's subordinates
# to *value*.
#
# ```ven
# foo = 0 x 100;
# foo[to 2] = 1;
# say(foo); # [1 1 0 0 0 0 0 ...]
# ```
fun<any> __access_assign(value, items) given any, range =
  if items.full? and |and| |$ > _| items
    apply(__access_assign, [$] & value & items)()
  else if items.beginless? and $ >= items.end
    apply(__access_assign, [$] & value & (0 to items.end - 1))()
  else if items.endless? and $ > items.begin
    apply(__access_assign, [$] & value & (items.begin to #$ - 1))()
  else
    die(typeof($) ~ ": cannot apply '$items'");

# Returns a new vector, with all items for which *fn* returned
# `false` removed.
#
# If *fn*'s arity:
#
# 1. = 0, the filteree is put onto *fn*'s references stack.
# 2. = 1, the filteree is passed to *fn*.
# 3. = N, N consequent filterees (including the filteree
#    under the cursor) are passed to *fn*.
fun<vec> __filter(fn) given any(concrete, lambda, builtin, frozen) =
  if #fn is 0
    die("todo")
    #  $.__filter_inject(fn)
  else if #fn is 1
    $.__filter_call(fn)
  else
    die("$.__filter_take(fn, #fn)");

# Dies: can inject only into lambdas.
fun<vec> __filter_inject(fn) given function =
  die("you can only pass arity-zero lambdas");

# Queues only those items for which *fn* returns a non-false.
fun<vec> __filter_inject(fn) given lambda {
  |(fn["refs"] = [&_]) and fn() and queue _|: $;
  # Force-return the queue, even if it is empty.
  return queue
}

# :ditto:
fun<vec> __filter_call(fn) given function {
  |fn(&_) and queue _|: $;
  # Force-return the queue, even if it is empty.
  return queue
}

# Prints the argument to `STDOUT`. Submits `actions.Say` with
# the argument it received.
fun say(_) =
  return &_ and actions.Say(_).submit();

# Prints each argument to `STDOUT`. See `say(_)`.
fun say(*) =
  |say(_)| *;

# Prints the argument to `STDOUT`, and blocks, waiting for
# user input. Returns the user input as string. Dies if got
# EOF, or if interrupted by CTRL-C.
fun ask(_) =
  actions.Ask(_ ~ " ").submit();

# Maps `ask` over the arguments. Returns a vector of anwsers.
fun ask(*) =
  |ask(_)| *;

# Returns the contents of *filename*.
fun slurp(filename) given str =
  actions.Slurp(filename).submit();

# Appends *content* to *filename*.
fun burp(filename, content) given str =
  actions.Burp(filename, content).submit();

# Writes *content* to *filename*.
fun write(filename, content) given str =
  actions.Write(filename, content).submit();
