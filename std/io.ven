distinct std.io;

_STDIN  = "/dev/stdin";
_STDOUT = "/dev/stdout";
_STDERR = "/dev/stderr";

#) Reads and returns the contents of an opened file at address
#) *address*.
fun read(address) given num {
  contents = "";

  loop (char = sys.get(address))
    contents ~= char;

  (return contents) and sys.close(address)
}

#) Reads and returns the contents of the file located at some
#) *location*.
fun read(location) given str =
  read(sys.open(location, "r"));

#) Writes *contents* to an opened file at address *address*.
fun write(address, contents) given num, str {
  loop (i = 0; i < #contents; current = contents(i); i += 1)
    sys.put(address, current);

  (return contents) and sys.close(address);
}

#) Writes *contents* to the file at located at some *location*.
fun write(location, contents) given str =
  write(sys.open(location, "a"), contents);

#) Writes *entity* to the STDOUT.
fun put(entity) given str =
  write(_STDOUT, entity);

#) Writes *entity* plus a trailing newline to the STDOUT.
fun say(entity) given str =
  return entity and put(entity ~ "\n");

#) `say`s the stringified *entity* to the STDOUT. Returns
#) the entity back, unchanged.
fun say(entity) =
  return entity and say(~entity);

#) `say`s each argument to the STDOUT. Returns a vector of
#) arguments it received.
fun say(*) =
  |say(_)|: rest;

#) Queries a line from the standard input and returns it.
#) Chomps the trailing newline. Dies on EOF.
fun ask {
  line = "";

  loop (stdin = sys.open(_STDIN, "r"); char = sys.get(stdin); line ~= char) {
    if char is "\n" {
      return sys.close(stdin) and line
    }
  }

  die("got end-of-file")
}

#) Prompts the user a *question* plus a trailing whitespace,
#) and returns the user's answer.
fun ask(question) given str =
  put(question ~ " ") and ask();

#) Prompts the user multiple questions plus trailing whitespaces,
#) and returns a vector of the user's answers.
fun ask(*) =
  |ask(~_)| rest;
