distinct std.str;

# Returns the string *self* offset by *offset* characters.
fun offset(self, offset) given str, num =
  slice(self, offset, -1);

# Returns whether the string *self* starts with a *prefix*.
fun starts-with?(self, prefix) given str {
  size = #prefix;

  if size > #self or size is 0 {
    return false
  };

  loop (i = 0; i < size; i += 1)
    if self(i) is not prefix(i) {
      return false
    };

  true
}

# Returns whether the prefix of the string *self* matches
# the *pattern*.
fun starts-with?(self, pattern) given str, regex =
  (self is pattern)?

# Splits the string *self* on *delimiter*. Returns a vector
# of the chunks.
fun split(self, delimiter) given str {
  chunks = [];

  loop (index = 0; index < #self; index += 1)
    if self.offset(index).starts-with?(delimiter) {
      chunks &= self.slice(0, index - 1);
      self   = self.offset(index + #delimiter);
      index  = 0;
    };

  # '&' the remaining string
  chunks & self
}

# Splits the string *self* when the *pattern* matches. Returns
# a vector of the chunks.
fun split(self, pattern) given str, regex {
  chunks = [];

  loop (index = 0; index < #self; index += 1)
    if self.offset(index) is pattern {
      chunks &= self.slice(0, index - 1);
      self   = self.offset(index + #_);
      index  = 0;
    };

  chunks & self
}

# Splits the string *self* into *parts* parts. Returns a
# vector of the chunks.
fun split(self, parts) given str, num {
  chunks = [];

  loop (index = 0; index < #self; index += 1)
    if index is parts {
      chunks &= self.slice(0, index - 1);
      self   = self.offset(index);
      index  = 0;
    };

  chunks & self
}
