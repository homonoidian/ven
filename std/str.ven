distinct std.str;

expose std;

# Returns whether this string starts with a string *prefix*.
#
# ```
# ensure "foobar".starts-with?("foo") is true;
# ensure "foobar".starts-with?("bar") is false;
# ```
fun<str> starts-with?(prefix) {
  size = #prefix;

  if size > #$ or size is 0 {
    return false
  };

  loop (i = 0; i < size; i++)
    if $(i) is not prefix(i) {
      return false
    };

  true
}

# Returns whether this string starts with a regex *pattern*.
#
# ```
# ensure "aaa".starts-with?(`a+`) is true;
# ensure "baa".starts-with?(`a+`) is false;
# ```
fun<str> starts-with?(pattern) given regex =
  true?($ is pattern);

# Returns whether this string is empty.
#
# ```
# ensure "".empty?() is true;
# ensure "foo".empty?() is false;
# ```
fun<str> empty? =
  true?(#$ is 0);

# Returns whether all characters in this string are the same.
#
# ```
# ensure "".same?() is true;
# ensure "aaa".same?() is true;
# ensure "aba".same?() is false;
# ```
fun<str> same? {
  if $.empty?() {
    return true;
  };

  first = $(0);

  loop (i = 1; i < #$; i++)
    if $(i) is not first {
      return false
    };

  true
}
